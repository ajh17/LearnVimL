*learnviml.txt*  A Suggested Path for Learning VimL

This help file teaches the VimL scripting language using a progressive
set of readnig assignments and followup hands-on exercises. It is aimed
primarily at existing programmers, however beginners can do the external
tutorials referenced below.

This file is structured with the following conventions:

CHAPTER HEADINGS are all caps and preceded by a line of # characters.
SECTIONS within a Chapter are all caps and preceded by a line of = characters.
1. Topics within a Section are numbered, in Title Case.
Exercises are blocked in lines of - characters.

##############################################################################
LEARNVIML TABLE OF CONTENTS                                *learnviml-toc*

|learnviml-Introduction|
|learnviml-Suggested-Path|
|learnviml-Syntax|
|learnviml-Builtin-Functions|
|learnviml-OOP|
|learnviml-Plugins|
|learnviml-Extras|

##############################################################################
INTRODUCTION                                      *learnviml-introduction*

What is VimL? In simple terms, it's Vim's scripting language, but the full
answer is a little more complicated than that. It's actually more than one
language; it's a procedural expression language (with prototypal OOP
extensions) wrapped around a declarative command language (called Ex). It has
builtin regular expressions making text manipulation easier, a comprehensive
library of builtin functions for manipulating strings, floats, lists and
dictionaries as well as Vim editor objects like buffers, windows, tabs and the
myriad auxiliary entities surrounding them. It supports procedural,
functional(-ish) and object-oriented approaches to software development. It may
not be the prettiest language in the world, but it definietly gets the job
done.

I intend here to walk you through the most important parts of the Vim Reference
Manual and User Guide pertaining to VimL. If you would rather read the essence
from start to end on your own, then:

* The builtin reference manual for VimL is |usr_41.txt|
* The expression language is covered in |eval.txt|

If you would like a more colourful, friendly and gentler introduction to the
wonderful world of VimL coding then see:

* Damian Conway's Beginner's Guide to VimL:
  http://www.ibm.com/developerworks/linux/library/l-vim-script-1/index.html

* Steve Lush's Learn VimL the Hard Way:
  http://learnvimscriptthehardway.stevelosh.com/

If you're still with me, let's dive in:

A SUGGESTED PATH FOR LEARNING VIML              *learnviml-suggested-path*

Syntax~

Read the following parts of |cmdline.txt|
3. Ex command-lines         |cmdline-lines|
4. Ex command-line ranges   |cmdline-ranges|
6. Ex special characters    |cmdline-special|

--------------------------------------------------------------------------
Exercise Set 1: The Ex Language

1.0 What is the Ex language and what is it used for in Vim?
1.1 How does it relate to VimL?

2.0 How do you comment out an Ex line?
2.1 How do you feel about this? Can you imagine any conflicts
    this might cause?
2.2 Which commands can't take a trailing comment? Why?

3.0 The ';' is used in shell and C to separate commands. How do
    you separate commands in Ex?
3.1 How do you escape the Ex command separator?
3.2 Which commands cannot use this command separator? Why?
3.3 How do you overcome this limitation?
3.4 The developer wanted to replace all apples with bananas and
    all cherries with durians, but his approach was broken. Why?
    Fix it:  (two acceptable solutions)

  :%s/apple/banana/|s/cherry/durian/

3.5 External commands (using the shell) consume the standard Ex
    command separator. What is the solution to this problem?

4.0 What meanings do '%' and '#' have on the Ex command line? When?
4.1 Explain the difference between these two commands:

  :w! name
  :w !name

5.0 Explain the difference between using ',' and ';' in command-line
    ranges.
5.1 What do the following special ranges evaluate to?
  .
  $
  %

5.2 What is the command for the range from the line after the next
    occurrence of '^Chapter' and 5 lines before a subsequent '^Example'?

6.0 How do you insert the name of the current buffer into a command-line
    command? There are two solutions.
6.1 Using the |expand()| function, |:echo| the full path name of the
    current buffer.
6.2 What is the difference between <cword> and <cWORD>?
6.3 How do you pull the current <cword> up into the command-line?
--------------------------------------------------------------------------

Read the following parts of |options.txt|
1. Setting options          |set-option|

2. Read the following specific options:
|'debug'|
|'eventignore'|
|'ignorecase'|
|'magic'|
|'maxfuncdepth'|
|'runtimepath'|
|'verbose'|

--------------------------------------------------------------------------
Exercise Set 2: VimL-specific Options

1.0 What is the difference between these two commands?
  :set ignorecase?
  :set ignorecase
1.1 Show two ways to display the current value of an option.
    (hint: one uses :set and the other uses :echo)
1.2 How do you switch off a boolean option?
1.3 How do you toggle a boolean option?
1.4 What does this command do?
  :set magic&vim
1.5 How do you append values to string options?
1.6 How do you prepend values to string options?
1.7 How do you find out which script last set an option?
1.8 How do you include whitespace and backslashes in option values?
1.9 What are local options? How do they differ to global options?
    What is the command to set local options?
1.10 How do you set the global value for a local option without altering
     the local value?
1.11 What is the difference between:
  :set ft=lisp
  :setf lisp
1.12 What are the two commands which open the interactive options brwoser?

3.0 When Vim is executing VimL in certain deeply nested situations, errors
    are often blindly ignored leaving the developer perplexed as to the
    source of problems. Name one way the developer can force Vim to show
    errors.

4.0 What are some reasons you could think of for the |'eventignore'| option?

5.0 Apart from setting |'ignorecase'|, what is another way the VimL
    developer can ensure case-sensitive matches?

6.0 Should you ever change the value of the |'magic'| option?
    What should you do to a developer who does?

7.0 Why does VimL have the |'maxfuncdepth'| option? What is the default
    depth? When would you increase this value?

8.0 What effect would altering the |'runtimepath'| have in the ~/.vimrc
    file? What type of plugin would rely heavily on this feature?

9.0 What does   :set verbose=12   do? When would you need to do that?
9.1 How can you solve the problem of information overload with the
    verbose option?
--------------------------------------------------------------------------

Read all of |pattern.txt|

--------------------------------------------------------------------------
Exercise Set 3: Using Regexes in VimL
--------------------------------------------------------------------------

Read the following parts of |eval.txt|
1. Variables                |variables|
2. Expression syntax (skim) |expression-syntax|
3. Internal variable        |internal-variables|
5. Defining functions       |user-functions|
7. Commands                 |expression-commands|
9. Examples                 |eval-examples|

--------------------------------------------------------------------------
Exercise Set 4: The Expression Language, Variables, Functions and Commands
--------------------------------------------------------------------------

Read sections |41.1| - |41.5| in |usr_41.txt|

--------------------------------------------------------------------------
Exercise Set 5: VimL Control Structures, Variables, Expressions,
                Conditionals, Logic Operators
--------------------------------------------------------------------------

Read section |41.7| in |usr_41.txt|

--------------------------------------------------------------------------
Exercise Set 6: Defining, Listing, Debugging and Deleting Functions
--------------------------------------------------------------------------

Read section |41.8| in |usr_41.txt|

--------------------------------------------------------------------------
Exercise Set 7: Lists and Dictionaries, Object Oriented Programming
--------------------------------------------------------------------------

Builtin Functions~

Browse through |function-list|, Vim's built-in VimL library.

--------------------------------------------------------------------------
Exercise Set 8: Builtin String Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 9: Builtin Float Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 9: Builtin List Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 9: Builtin Dictionary Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 9: Builtin Bitwise Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 9: Builtin Var Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 9: Builtin Cursor and Mark Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 9: Builtin Buffer Text Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 9: Builtin System and File Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 9: Builtin Date and Time Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 9: Builtin Buffer, Window, Tab and Arg Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 9: Builtin Command-line Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 9: Builtin Quickfix Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 9: Builtin Completion Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 9: Builtin Folding Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 9: Builtin Syntax and Highlighting Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 9: Builtin Spelling Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 9: Builtin History Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 9: Builtin Interactive Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 9: Builtin GUI Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 9: Builtin Server Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 9: Builtin Window Size Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 9: Miscellaneous Builtin Functions
--------------------------------------------------------------------------

Read |map.txt|
Read |map.txt|
Read |'timeout'| option
Read |'maxmapdepth'| option
Read |usr_40.txt|

--------------------------------------------------------------------------
Exercise Set 9: Key Maps
--------------------------------------------------------------------------

Read |autocmd.txt|
Read |filetype.txt|

--------------------------------------------------------------------------
Exercise Set 10: Autocommands and Filetypes
--------------------------------------------------------------------------

Read |various.txt|

--------------------------------------------------------------------------
Exercise Set 11: Autocommands, Redraw, Normal, and External Commands
--------------------------------------------------------------------------

In regard to |:normal|, read |motion.txt|

--------------------------------------------------------------------------
Exercise Set 12: Motions
--------------------------------------------------------------------------

Read |41.9| in |usr_41.txt|

--------------------------------------------------------------------------
Exercise Set 12: Exceptions
--------------------------------------------------------------------------

Read |41.11| in |usr_41.txt|

Install the Area41 plugin.

--------------------------------------------------------------------------
Exercise Set 12: Writing Normal Plugins
--------------------------------------------------------------------------

Read |41.12| in |usr_41.txt|

--------------------------------------------------------------------------
Exercise Set 12: Writing Filetype Plugins
--------------------------------------------------------------------------

Read |41.15| in |usr_41.txt|

--------------------------------------------------------------------------
Exercise Set 12: Writing Library Scripts (autoload)
--------------------------------------------------------------------------

Challenges~

. Write an autocommand that removes trailing whitespace from all lines in the
  buffer when the user exits insert mode.

. VimL lacks a random number generator. Write one without shelling out to the
  OS.

. Write a syntax plugin for a filetype you use that is missing from Vim, or
  improve an existing filetype that has bugs, limitations or omissions.

. Write a plugin that receives commands from one window but performs them in
  another. Particular commands to support include: * and <c-]>

. Vim's native tab-page interface is a bit clunky. Write a plugin that makes
  tabs work the way you know they should.

 vim:noet:sw=8:nosmarttab:sts=0:fo=tcq2:isk=!-~,^*,^\|,^\":ts=8:fdm=marker:ft=help:norl:noro:modifiable:
